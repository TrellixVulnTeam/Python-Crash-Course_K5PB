函数input()的工作原理
    函数input()让程序暂停运行，等待用户输入一些文本。
    获取用户输入后，Python将其存储在一个变量中，以方便你使用。
    函数input()接受一个参数：即要向用户显示的提示或说明，让用户知道该如何做。
    注意：Sublime Text不能运行提示用户输入的程序。

每当你使用函数input()时，都应指定清晰而易于明白的提示，准确地指出你希望用户提供什么样的信息。
通过在提示末尾包含一个空格，可将提示与用户输入分开，让用户清楚地知道其输入始于何处。
有时候，提示可能超过一行。
在这种情况下，可将提示存储在一个变量中，再将变量传递给函数input()。
这样，即使提示超过一行，input()语句也非常清晰。
运算符+=在存储在变量中的字符串末尾附加一个字符串。

使用函数input()时，Python将用户输入解读为字符串。
如果我们只想打印输入，这一点问题都没有；但如果你试图将输入作为数字使用，就会引发错误。
你试图将输入用于数值比较时，Python会引发错误，因为它无法将字符串和整数进行比较。
为解决这个问题，可使用函数int()，它让Python将输入视为数值。
函数int()将数字的字符串表示转换为数值表示。
将数值输入用于计算和比较前，务必将其转换为数值表示。

处理数值信息时，求模运算符(%)是一个很有用的工具，它将两个数相除并返回余数。
求模运算符不会指出一个数是另一个数的多少倍，而只指出余数是多少。
如果一个数可被另一个数整除，余数就为0，因此求模运算符将返回0。
你可以利用这一点来判断一个数是奇数还是偶数。

for循环用于针对集合中的每个元素的一个代码块，而while循环不断地运行，直到指定的条件不满足为止。
你每天使用的程序很可能就包含while循环。

可使用while循环让程序在用户愿意时不断地运行。

在更复杂的程序中，很多不同的事件都会导致程序停止运行。
导致程序停止运行的事件有很多时，如果在一条while语句中检查所有这些条件，将既复杂又困难。
在要求很多条件都满足才继续运行的程序中，可定义一个变量，用于判断整个程序是否处于活动状态。
这个变量被称为标志，充当了程序的交通信号灯。
你可让程序在标志为True时继续运行，并在任何事件导致标志的值为False时让程序停止运行。
这样，在while语句中就只需检查一个条件——标志的当前值是否为True，并将所有测试都放在其他地方。
在复杂的程序中，标志很有用！

要立即退出while循环，不再运行循环中余下的代码，也不管条件测试的结果如何。可使用break语句。
break语句用于控制程序流程，可使用它来控制哪些代码行将执行，哪些代码行不执行。
以 while True 打头的循环将不断运行，直到遇到break语句。
注意：在任何Python循环中都可使用break语句。

要返回到循环开头，并根据条件测试结果决定是否继续执行循环，可使用continue语句。
它不像break语句那样不再执行余下的代码并退出整个循环。

每个while循环都必须有停止运行的途径，这样才不会没完没了地执行下去。
每个程序员都会偶尔因不小心而编写出无限循环，在循环的退出条件比较微妙时尤其如此。
如果程序陷入无限循环，可按Ctrl+C，也可关闭显示程序输出的终端窗口。
要避免编写无限循环，务必对每个while循环进行测试，确保它按预期那样结束。
如果你希望程序在用户输入特定值时结束，可运行程序并输入这样的值。
如果在这种情况下程序没有结束，请检查程序处理这个值的方式。
程序应该至少有一个这样的地方让循环条件为False或让break语句得以执行。
注意：有些编辑器内嵌了输出窗口，这可能导致难以结束无限循环，因此不得不关闭编辑器来结束无限循环。

要记录大量的用户和信息，需要在while循环中使用列表和字典。
for循环是一种遍历列表的有效方式，但在for循环中不应修改列表，否则将导致Python难以跟踪其中的元素。
要在遍历列表的同时对其进行修改，可使用while循环。
通过将while循环同列表和字典结合起来使用，可收集、存储并组织大量输入，供以后查看和显示。

使用while循环可以在列表之间移动元素。

如果要删除列表中所有包含特定值的元素，可不断运行一个while循环，直到列表中不再包含该特定值。

可使用while循环提示用户输入任意数量的信息。
