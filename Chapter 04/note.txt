你经常需要遍历列表的所有元素，对每个元素执行相同的操作。
需要对列表中的每个元素都执行相同的操作时，可使用Python中的for循环。
通过使用for循环，可以让Python去处理一些问题。

循环这种概念很重要，因为它是让计算机自动完成重复工作的常见方式之一。
刚开始使用循环时请牢记，对列表中的每个元素，都将执行循环指定的步骤，而不管列表包含多少个元素。
在编写for循环时，对于用于存储列表中的每个值的临时变量，可指定任何名称。
选择描述单个列表元素的有意义的名称很有帮助。
这些命名约定有助于你明白for循环中将对于每个元素执行的操作。
使用单数和复数式名称，可帮助你判断代码段处理的是单个列表元素还是整个列表。

在for循环中，可对每个元素执行任何操作。
在for循环中，想包含多少行代码都可以。
在代码行for后面，每个缩进的代码行都是循环的一部分，且将针对列表中的每个值都执行一次。
因此，可对列表中的每个值执行任意次数的操作。
实际上，你会发现使用for循环对每个元素执行众多不同的操作很有用。

通常，你需要提供总结性的输出或接着执行程序必须完成的其他任务。
在for循环后面，没有缩进的代码都只执行一次，而不会重复执行。
使用for循环处理数据是一种对数据集执行整体操作的不错的方式。

Python根据缩进来判断代码行与前一个代码行的关系。
Python通过使用缩进让代码更易读。
简单地说，它要求你使用缩进让代码整洁而结构清晰。
在较长的Python程序中，你将看到缩进程度各不相同的代码块，这让你对程序的组织结构有大致的认识。
当你开始编写必须要正确缩进的代码时，需要注意一些常见的缩进错误。
有时你会将不需要缩进的代码块缩进，有时又会对于必须缩进的代码块忘记缩进。

对于位于for语句后面且属于循环组成部分的代码行，一定要缩进。
如果你忘记缩进了，Python会提醒你。
Python没有找到期望缩进的代码块时，会让你知道哪行代码有问题。
    -IndentationError: expected an indented block
通常，将紧跟在for语句后面的代码行缩进，可消除这种缩进错误。

有时候，循环能够运行而不会报告错误，但结果可能会出乎意料。
试图在循环中执行多项任务，却忘记缩进其中的一些代码行时，就会出现这种情况。
这是一个逻辑错误。
从语法上来看，这些Python代码都是合法的，但由于存在逻辑错误，结果并不符合预期。
如果你预期某项操作将针对每个列表元素都执行一次，但它却只执行了一次，请确定是否需要将一行或者多行代码缩进。

如果你不小心缩进了无需缩进的代码行，Python将指出这一点。
语句无需缩进，因为它并不属于前一行代码时，Python将指出这种错误。
    -IndentationError: unexpected indent
为避免意外缩进错误，请只缩进需要缩进的代码。
在编写的程序中，只有要在for循环中对每个元素执行的代码需要缩进。

如果你不小心缩进了应在循环结束后执行的代码，这些代码将针对每个列表元素重复执行。
在有些情况下，这可能导致Python报告语法错误，但在大多数情况下，这只会导致逻辑错误。
Python不知道你的本意，只要代码符合语法它就会运行。
如果原本只应执行一次的操作执行了多次，请确定你是否不应该缩进执行该操作的代码。

for语句末尾的冒号告诉Python，下一行是循环的第一行。
如果你不小心遗漏了冒号，将导致语法错误，因为Python不知道你意欲何为。
这种错误虽然易于清除，但并不那么容易发现。
程序员为找出这样的单字符错误，花费的时间多到令人惊讶。

需要存储一组数字的原因有很多。
列表非常适合用于存储数字集合，而Python提供了很多工具，可帮助你高效的处理数字列表。
明白如何有效地使用这些工具，即便列表包含数百万个元素，你编写的代码以能运行得很好。

Python函数range()让你能够轻松地生成一系列得数字。
函数range()让Python从你指定的第一个值开始数，并在到达你指定的第二个值后停止，因此输出不包含第二个值。
    例如要打印数字1~5，需要使用range(1,6)。
使用range()时，如果输出不符合预期，请尝试将指定的值加1或减1。

要创建数字列表，可使用函数list()将range()的结果直接转换为列表。
如果将range()作为list()的参数，输出将为一个数字列表。
使用函数range()时，还可指定步长。如奇偶数集。
使用函数range()几乎能够创建任何需要的数字集。如平方集。
为让这些代码更简洁，可不使用临时变量，而直接将每个计算得到的值附加到列表末尾。
创建更多更复杂的列表时，可以使用临时变量或者不使用临时变量直接附加。
有时使用临时变量会让代码更易读；而有时，这样做只会让代码无谓地变长。
你首先考虑的是，编写清晰易懂且能完成所需功能的代码；等到审核代码时，再考虑采用更高效的方法。

有几个专门用于处理数字列表的Python函数，如min(最小值)、max(最大值)和sum(总和)。
注意：这些也适用于包含数百万个数字的列表。

列表解析将for循环和创建新元素的代码合并成一行，并自动附加新元素。
要使用这种语法：
    首先指定一个描述性的列表名；
    然后，指定一个左方括号，并定义一个表达式，用于生成你要存储到列表中的值；
    接下来，编写一个for循环，用于给表达式提供值，再加上右括号。
    请注意，这里的for语句末尾没有冒号。
要创建自己的列表解析，需要经过一定的练习，但能够熟练地创建常规列表后，你会发现这样做是完全值得的。
当你觉得编写三四行代码来生成列表有些复杂时，就应考虑创建列表解析了。

