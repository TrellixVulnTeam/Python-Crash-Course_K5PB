运行hello_world.py文件时，末尾的.py指出这是一个Python程序，因此编辑器将使用Python解释器(interpreter)来运行它。
Python解释器读取整个程序，确定其中每个单词的含义。例如：看到单词print就会将括号里的内容输出，不管是什么。

编写程序时，编辑器会以各种方式突出程序的不同部分。
这种功能称为“语法突出”，在刚开始编程的时候很有帮助。

每个变量都储存了一个值——与变量相关联的信息。
添加变量导致Python解释器需要做更多的工作。

在程序中可随时改变变量的值，而Python将始终记录变量的最新值。

使用变量的规则：
1.变量名只能包含字母、数字和下划线。
2.变量名可以字母或下划线开头，但不能以数字开头。
3.变量名不能包含空格，但可以使用下划线来分隔其中的单词。
4.不要将Python关键字和函数名用作变量名。即不要使用Python保留用于特殊用途的单词，如print
5.变量名应该既简短又具有描述性。
6.慎用小写字母l和大写字母O，因为容易被错认成数字1和0。
注意：就目前而言，应使用小写的Python变量名。

程序存在错误时，Python解释器将竭尽所能地帮助你找出问题所在。
程序无法成功地运行时，解释器会提供一个Traceback。
Traceback是一条记录，指出了解释器尝试运行代码时，在什么地方陷入了困境。

    Traceback (most recent call last):
        File "hello_world.py", line 15, in <module>
            print(mesage)
    NameError: name 'mesage' is not defined

在这里，解释器发现了一个名称错误，并指出打印的变量mesage未定义：Python无法识别你的变量名
名称错误通常有两种：要么是使用前忘记给它赋值，要么是输入时拼写不正确

Python解释器不会对代码做拼写检查，但要求变量名的拼写一致。
计算机一丝不苟，但不关心拼写是否正确。因此，创建变量名和编写代码时，你无需考虑英语中的拼写和语法规则。

注意：要理解新的编程概念，最佳的方式是尝试在程序中使用它们。

字符串就是一系列字符。
在Python中，用引号括起来的都是字符串，其中的引号可以是单引号，也可以是双引号。如：
    "This is a string."
    'This is also a string.'
这种灵活性让你能够在字符串中包含引号和撇号。
注意：如果同时包含引号和撇号，则使用三个单引号括起来。

对于字符串，可执行的最简单的操作之一是修改其中的单词的大小写。
方法是Python可对数据执行的操作。
每个方法后面都跟着一对括号，这是因为方法通常需要额外的信息来完成其工作，这种信息是在括号内提供的。
若不需要额外的信息，则后面的括号就是空的。
title()以首字母大写的方式显示每个单词，即将每个单词的首字母都改为大写。
存储数据时，方法lower()很有用。
    很多时候，你无法依靠用户来提供正确的大小写，因此需要将字符串先转换为小写，在存储它们。
    以后需要显示这些信息的时候，再将其转换为最合适的大小写方式。

在很多情况下，都需要合并字符串。
Python使用加号(+)来合并字符串。
这种合并字符串的方法称为拼接。
通过拼接，可使用存储在变量中的信息来创建完整的消息。

你可以使用拼接来创建消息，再把整条消息都存在一个变量中。

在编程中，空白泛指任何非打印字符，如空格、制表符和换行符。
你可以使用空白来组织输出，以使其更易读。
要在字符中添加制表符，可使用字符组合\t
要在字符中添加换行符，可使用字符组合\n
还可在同一个字符串中同时包含制表符和换行符。
    字符串"\n\t"让输出换到下一行，并在下一行开头添加一个制表符。

在程序中，额外的空白可能令人迷惑。
空白很重要，因为你经常需要比较两个字符串是否相同。
在一些简单的情况下，额外的空白也可能令人迷惑。
Python能够找出字符串的开头和末尾多余的空白。
要确保字符串末尾没有空白，可使用方法rstrip()。
要确保字符串开头没有空白，可使用方法lstrip()。
要确保字符串开头和末尾都没有空白，可使用方法strip()。
然而，这种删除只是暂时的，接下来再次询问变量的值时，你会发现这个字符串与输入时一样，依然包含多余的空白。
要永久删除这个字符串中的空白，必须将删除操作的结果存回到变量中。
在实际程序中，这些剔除函数最常用于在存储用户输入前对其进行清理。

在编程中，经常需要修改变量的值，再将新值存回到原来的变量中。
这就是变量的值可能会随程序的运行或用户输入数据而发生变化的原因。

语法错误是一种时不时会遇到的错误。
程序中包含非法的Python代码时，就会导致语法错误。
错误的来源多种多样，这里指出一些常见的。
学习编写Python代码时，你可能会经常遇到语法错误。
语法错误也是最不具体的错误类型，因此可能难以找出并修复。
注意：编写程序时，编辑器的语法突出功能可以帮助你快速找出某些语法错误。

在编程中，经常会使用数字来记录游戏得分、表示可视化数据、存储Web应用信息等。
Python根据数字的用法以不同的方式处理它们。

在Python中，可对整数执行加(+)减(-)乘(*)除(/)运算。
Python还支持运算次序，因此你可在同一个表达式中使用多种运算。
你还可以用括号来修改运算次序，让Python按你指定的次序执行运算。
空格不影响Python计算表达式的方式，它们的存在旨在让你阅读代码时，能迅速确定先执行哪些运算。

Python将带小数点的数字都称为浮点数。
大多编程语言都使用了这个术语，它指出了这样一个事实：小数点可出现在数字的任何位置。
每种编程语言都需细心设计，以妥善地处理浮点数，确保不管小数点出现在什么位置，数字的行为都是正常的。
很大程度上说，使用浮点数时都无需考虑其行为。
你只需输入要使用的数字，Python通常都会按你期望的方式处理它们。
但需要注意的是，结果包含的小数位数可能是不确定的。
Python会尽力找到一种方式，以尽可能精确地表示结果，但鉴于计算机内部表示数字的方式，这在有些情况下很难。
就现在而言，暂时忽略多余的小数位数即可。

Python知道，某个变量表示的可能是数值23，也可能是字符2和3。
像这样的变量在字符串中使用整数时，需要显式地指出你希望Python将这个整数用作字符串。
为此，可调用函数str()，它让Python将非字符串值表示为字符串。

在大多数编程语言中，注释都是一项很有用的功能。
随着程序越来越大，越来越复杂，就应在其中添加说明，对你解决问题的方法进行大致的阐述。
注释让你能够使用自然语言在程序中添加说明。
在Python中，注释用井号(#)标识。井号后面的内容都会被Python解释器忽略。
编写注释的主要目的是阐述代码要做什么，以及是如何做的。
通过编写注释，以清晰的自然语言对解决方案进行概述，可以节省更多时间。
要成为专业的程序员或与其他程序员合作，就必须编写有意义的注释。
如果不确定是否要写注释，就问问自己，找到合理的解决方案前，是否考虑了多个解决方案。

Python之禅
1.Beautiful is better than ugly.
2.Simple is better than complex.
3.Complex is better than complicated.
4.Readability counts.
5.There should be one-- and preferably only one --obvious way to do it.
6.Now is better than never.

