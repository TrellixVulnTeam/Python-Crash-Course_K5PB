每条if语句的核心都是一个值为True或False的表达式，这种表达式被称为条测试。
Python根据条件测试的值为True还是False来决定是否执行if语句中的代码。
如果条件测试的值为True，Python就执行紧跟在if语句后面的代码；如果为False，Python就忽略这些代码。

大多数条件测试都将一个变量的当前值同特定值进行比较。
最简单的条件测试检查变量的值是否与特定值相等。
    -使用两个等号(==)检查
一个等号是陈述，两个等号是发问。
大多数编程语言使用等号的方式都与这里相同。

在Python中检查是否相等时区分大小写。
如果大小写很重要，这种行为有其优点。
但如果大小写无关紧要，而只想检查变量的值，可将变量的值转换为小写，再进行比较。
网站采用类似的方式让用户输入的数据符合特定的格式。

要判断两个值是否不等，可结合使用惊叹号和等号(!=)，其中的惊叹号表示不，在很多编程语言中都是如此。
如果它们不相等，Python将返回True，进而执行紧跟在if语句后面的代码。
如果这两个值相等，Python将返回False，因此不执行紧跟在if语句后面的代码。
你编写的大多数条件表达式都检查两个值否相等，但有时候检查两个值是否不等的效率更高。

检查数值非常简单。
你还可以检查两个数字是否不等。
条件语句中可包含各种数学比较，如小于、小于等于、大于、大于等于。
在if语句中使用各种数学比较，这让你能够直接检查关心的操作。

你可能想同时检查多个条件，例如：
    有时候你需要在两个条件都为True时才执行相应的操作，
    有时候你只要求一个条件为True时就执行相应的操作。
在这种情况下，关键字and和or可助你一臂之力。

要检查是否两个条件都为True，可使用关键字and将两个条件测试合而为一。
如果每个测试都通过了，整个表达式就为True。
如果至少有一个测试没有通过，整个表达式就为False。
为改善可读性，可将每个测试都分别放在一对括号内，但并非必须这样做。

关键字or也能够让你检查多个条件，但只要至少有一个条件满足，就能通过整个测试。
仅当两个测试都没通过时，使用or的表达式才为False。

有时候，执行操作前必须检查列表是否包含特定的值。
要判断特定的值是否已包含在列表中，可使用关键字in。
关键字in让Python检查列表是否包含特定的值。
这种技术很有用，它让你能够在创建一个列表后，轻松地检查其中是否包含特定的值。

在有些时候，确定特定的值未包含在列表中很重要。
在这种情况下，可以使用关键字not in。

随着你对编程的了解越来越深入，将遇到术语布尔表达式，它不过是条件测试的别名。
与条件表达式一样，布尔表达式的结果要么为True，要么为False。
布尔值通常用于记录条件，如游戏是否在运行，或用户是否可以编辑网站的特定内容。
在跟踪程序状态或程序中重要的条件方面，布尔值提供了一种高效的方式。

理解条件测试后,就可以编写if语句了。
if语句有很多种，选择使用那种取决于要测试的条件数。
最简单的if语句只有一个测试和一个操作。
如果条件测试结果为True，Python就会执行紧跟在if语句后面的代码。
否则Python将忽略这些代码。

在if语句中，缩进的作用与for循环中相同。
如果测试通过了，将执行if语句后面所有缩进的代码行，否则将忽略它们。
在紧跟在if语句后面的代码块中，可根据需要包含任意数量的代码行。

经常需要在条件测试通过了执行一个操作，并在没有通过时执行另一个操作。
在这种情况下，可使用Python提供的if-else语句。
if-else语句块类似于简单的if语句，但其中的else语句让你能够指定条件测试未通过时要执行的操作。
if-else结构非常适合用于要让Python执行两种操作之一的情形。
在这种简单的if-else结构中，总是会执行两个操作中的一个。

经常需要检查超过两个的情形，为此可使用Python提供的if-elif-else结构。
Python只执行if-elif-else结构中的一个代码块，它依次检查每个条件测试，直到遇到通过了的条件测试。
测试通过后，Python将执行紧跟在它后面的代码，并跳过余下的测试。
在现实世界中，很多情况下需要考虑的情形都超过两个。
如果if测试和else测试都未通过，Python将运行else代码块中的代码。

可以根据需要使用任意数量的elif代码块。

Python并不要求if-elif结构后面必须有else代码块。
在有些情况下，else代码块很有用；而在其他一些情况下，使用一条elif语句来处理特定的情形更清晰。
经过这样的修改后，每个代码块都仅在通过了相应的测试时才会执行。
else是一条包罗万象的语句。
只要不满足任何if或elif中的条件测试，其中的代码就会执行，这可能会引入无效甚至恶意的数据。
如果知道最终要测试的条件，应考虑使用一个elif代码块来替代else代码块。
这样你就可以肯定，仅当满足相应条件时，你的代码才会执行。
