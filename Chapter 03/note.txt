列表由一系列按特定顺序排列的元素组成。
你可以创建包含字母表中所有字母、数字0~9或所有家庭成员姓名的列表；也可以将任何东西加入列表中，其中的元素之间可以没有任何关系。
鉴于列表通常包含多个元素，给列表指定一个表示复数的名称是个不错的主意。
在Python中，用方括号([])来表示列表，并用逗号来分隔其中的元素。

列表是有序集合，因此要访问列表的任何元素，只需将该元素的位置或者索引告诉Python即可。
要访问列表元素，可指出列表的名称，再指出元素的索引，并将其放在方括号内。
当你请求获取列表元素时，Python只返回该元素，而不包括方括号和引号。
你还可以对任何列表元素调用字符串方法。

在Python中，第一个列表元素的索引为0，而不是1。
在大多数编程语言中都是如此，这与列表操作的底层实现有关。
第二个列表元素的索引为1。
根据这种简单的计数方式，要访问列表的任何元素，都可将其位置减1，并将结果作为索引。

Python为访问最后一个列表元素提供了一种特殊语法。
通过将索引指定为-1，可让Python返回最后一个列表元素。
这种语法很有用，因为你经常需要在不知道列表长度的情况下访问最后一个元素。
这种约定也适用于其他负数索引，如索引-2返回倒数第二个列表元素，以此类推。

可像使用其他变量一样使用列表中的各个值，如拼接。

你创建的大多数列表都将是动态的，这意味着列表创建后，将随着程序的运行增删元素。

修改列表元素的语法与访问列表元素的语法类似。
要修改列表元素，可指定列表名和要修改的元素的索引，再指定该元素的新值。
你可以修改任何列表元素的值。

你可能出于众多原因要在列表中添加新的元素，Python提供了多种在既有列表中添加新数据的方法。
1.在列表末尾添加元素
    在列表末尾添加新元素时，最简单的方式是将元素附加到列表末尾。
    给列表附加元素时，它将添加到列表末尾。
    方法append()将元素添加到了列表末尾，而不影响列表中的其他所有元素。
    方法append()让动态地创建列表易如反掌，你可以先创建一个空列表，再使用一些列的append()语句添加元素。
    这种创建列表的方式极其常见，因为经常要等程序运行后，你才知道用户要在程序中储存哪些数据。
    为控制用户，可首先创建一个空列表，用于存储用户将要输入的值，然后将用户提供的每个新值附加到列表中。
2.在列表中插入元素
    使用方法insert()可在列表的任何位置添加新元素。
    为此，你需要指定新元素的索引和值。
    这种操作将列表中指定索引之后的元素都右移一个位置。

你经常需要从列表中删除一个或多个元素。
你可以根据位置或值来删除列表中的元素。
1.使用del语句删除元素
    如果知道要删除的元素在列表中的位置，可使用del语句。
    使用del可删除任何位置处的列表元素，条件是知道其索引。
    使用del语句将值从列表中删除后，你就无法再访问它了。
2.使用方法pop()删除元素
    有时候，你需要将元素从列表中删除，并接着使用它的值。
    方法pop()可删除列表末尾的元素，并让你能够接着使用它。
    术语弹出(pop)源自这样的类比：列表就像一个栈，而删除列表末尾的元素相当于弹出栈顶元素。
3.弹出列表中任何位置处的元素
    实际上，你可以使用pop()来删除列表中任何位置的元素，只需要在括号中指定要删除的元素的索引即可。
    每当你使用pop()的时候，被弹出的元素就不再在列表中了。
    如果你不确定该使用del语句还是pop()方法，下面是一个简单的判断标准：
        如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用del语句；
        如果你要在删除元素后还能继续使用它，就使用方法pop()。
4.根据值删除元素
    有时候，你不知道要从列表中删除的值所处的位置。
    如果你只知道要删除的元素的值，可使用方法remove()。
    使用remove()从列表中删除元素时，也可接着使用它的值。
    注意：remove()方法只删除第一个指定的值。
        如果要删除的值可能在列表中多次出现，就需要使用循环来判断是否删除了所有这样的值。

在你创建的列表中，元素的排列顺序常常是无法预测的，因为你并非总能控制用户提供数据的顺序。
虽然大多数情况下都是不可避免的，但你经常需要以特定的顺序呈现信息。
有时候你希望保留列表元素最初的排列顺序，有时你又需要调整排列顺序。
Python提供了很多组织列表的方式，可根据具体情况选用。

Python方法sort()让你能够较为轻松地对列表进行排序。
方法sort()永久性地修改了列表元素的排列顺序。
你还可以按与字母顺序相反的顺序排列列表元素，为此，只需向sort()方法传递参数reverse = True。
同样，对列表元素排列顺序的修改是永久的。

要保留列表元素原来的排列顺序，同时以特定的顺序呈现它们，可使用函数sorted()。
函数sorted()让你能够按特定顺序显示列表元素，同时不影响它们在列表中的原始排列顺序。
调用函数sorted()后，列表元素的排列顺序并没有变。
如果你要按与字母顺序相反的顺序显示列表，也可向函数sorted()传递参数reverse=True。
注意：在并非所有的值都是小写的时候，按字母顺序排列列表要复杂些。
    决定排列顺序时，有多种解读大写字母的方式，要指定准确的排列顺序，可能比我们这里所做的要复杂。

要反转列表元素的排列顺序，可以使用方法reverse()。
reverse()不是指按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排列顺序。
方法reverse()永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此，只需对列表再次调用reverse()即可。

使用函数len()可快速获悉列表的长度。
注意：Python计算列表元素数时从1开始，因此确定列表长度时，应该不会遇到差一错误。

刚开始使用列表时，经常会遇到一种错误：
    假设你有一个包含三个元素的列表，却要求获取第四个元素。
这将导致索引错误。(IndexError: list index out of range)
鉴于列表差一的特征，这种错误很常见。
索引错误意味着Python无法理解你指定的索引。
程序发生索引错误时，请尝试将你指定的索引减1，然后再次运行程序，看看结果是否正确。
每当需要访问最后一个列表元素的时候，都可使用索引-1。
这在任何情况下都行之有效，即便你最后一次访问列表后，其长度发生了变化。
索引-1总是返回最后一个列表元素。
仅当列表为空时，这种访问最后一个列表元素的方式才会导致错误。

发生索引错误却找不到解决办法时，请尝试将列表或其长度打印出来。
列表可能与你以为的截然不同，通过查看列表或其包含的元素数，可帮助找出这种逻辑错误。
