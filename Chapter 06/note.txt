与大多数编程概念一样，要熟练使用字典，也需要一段时间的练习。
使用字典一段时间后，你就会明白为何它们能够高效的模拟现实生活中的情形。

在Python中，字典是一系列键-值对。
每个键都与一个值相关联，你可以使用键来访问与之相关联的值。
与键相关联的值可以是数字、字符串、列表乃至字典。
事实上，可将任何Python对象用作字典中的值。
在Python中，字典用放在花括号{}中的一系列键-值对表示。
键-值对是两个相关联的值。
指定键时，Python将返回与之相关联的值。
键和值之间用冒号分隔，而键-值对之间用逗号分隔。
在字典中，你想储存多少个键-值对都可以。
最简单的字典，只有一个键-值对。

要获取与键相关联的值，可依次指定字典名和放在方括号内的键。
字典中可包含任意数量的键-值对。

字典是一种动态结构，可随时在其中添加键-值对。
要添加键-值对，可依次指定字典名，用方括号括起的键和相关联的值。
注意，键-值对的排列顺序与添加顺序不同。
Python不关心键-值对的添加顺序，而只关心键和值之间的关联关系。

有时候，在空字典中添加键-值对是为了方便，而有时候必须这样。
为此，可先使用一对空的花括号定义一个字典，再分行添加各个键-值对。
使用字典来存储用户提供的数据或在编写能自动生成大量键-值对的代码时，通常都需要先定义一个空字典。

要修改字典中的值，可依次指定字典名，用方括号括起的键以及与该键相关联的新值。

对于字典中不再需要的信息，可使用del语句将相应的键-值对彻底删除。
使用del语句时，必须指定字典名和要删除的键。
注意：删除的键-值对永远消失了。

字典存储的是一个对象的多种信息，但你也可以使用字典来存储众多对象的同一种信息。
我们将一个较大的字典放在了多行中。
确定需要使用多行来定义一个字典时，先在输入左花括号后按回车键。
然后再在下一行缩进四个空格，指定第一个键-值对，并在它后面加上一个逗号。
此后你再次按回车键时，文本编辑器将自动缩进后续键-值对，且缩进量与第一个键-值对相同。
定义好字典后，在最后一个键-值对的下一行添加一个右花括号，并缩进四个空格，使其与字典中的键对齐。
另外一种不错的做法是在最后一个键-值对后面也加上逗号，为以后在下一行添加键-值对做好准备。
注意：对于较长的列表和字典，大多数编辑器都有以类似方式设置其格式的功能。

一个Python字典可能只包含几个键-值对，也可能包含数百万个键-值对。
鉴于字典可能包含大量的数据，Python支持对字典遍历。
字典可用于以各种方式存储信息，因此有多种遍历字典的方式：
    键-值对
    键
    值

注意，即便遍历字典时，键-值对的返回顺序也与存储顺序不同。
Python不关心键-值对的存储顺序，而只跟踪键和值之间的关联关系。

遍历字典时，会默认遍历所有的键。
如果显式地使用方法kyes()可让代码更容易理解，你可以选择这样做(如果你愿意，亦可以省略)。
在这种循环中，可使用当前键来访问与之相关联的值。
方法keys()并非只能用于遍历；实际上，它返回一个列表，其中包含字典中的所有键。

字典总是明确地记录键和值之间的关联关系，但获取字典的元素时，获取顺序是不可预测的。
这不是问题，因为通常你想要的只是获取与键相关联的正确的值。
要以特定的顺序返回元素，一种办法是在for循环中对返回的键进行排序。
为此，可使用函数sorted()来获得按特定顺序排列的键列表的副本。
对方法keys()的结果调用了函数sorted()，这让Python列出字典中的所有键，并在遍历前对这个列表进行排序。

如果你感兴趣的主要是字典包含的值，可使用方法values()，它返回一个值列表，而不包含任何键。
这种做法提供字典中所有的值，而没有考虑是否重复。
涉及的值很少时，这也许不是问题，但如果被调查者很多，最终的列表可能包含大量的重复项。
为剔除重复项，可使用集合（set）。
集合类似于列表，但每个元素都必须是独一无二的。
通过对包含重复元素的列表调用set()，可让Python找出列表中独一无二的元素，并使用这些元素来创建一个集合。
随着你更深入地学习Python，经常会发现它内置的功能可帮助你以希望的方式处理数据。

有时候，需要将一系列字典存储在列表中，或将列表作为值存储在字典中，这称为嵌套。
你可以在列表中嵌套字典，在字典中嵌套列表，甚至在字典中嵌套字典。

经常需要在列表中包含大量的字典，而其中每个字典都包含特定对象的众多信息。
在这个列表中，所有字典的结构都相同，因此你可以遍历这个列表，并以相同的方式处理其中的每个字典。

有时候，需要将列表存储在字典中，而不是将字典存储在列表中。
每当需要在字典中将一个键关联到多个值时，都可以在字典中嵌套一个列表。
注意：列表和字典的嵌套层级不应太多。

可在字典中嵌套字典，但这样做时，代码会很快复杂起来。
请注意，字典的结构都相同，虽然Python并没有这样的要求，但这使得嵌套的字典处理起来更容易。
倘若字典都包含不同的键，for循环内部的代码将更复杂。
